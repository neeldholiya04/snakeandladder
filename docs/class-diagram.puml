@startuml SnakeAndLadderClassDiagram
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam PackageStyle rectangle
hide circle

package "org.example" {
  class Main
}

package "org.example.engine" {
  class GameEngine {
    - static GameEngine instance
    - Scanner scanner
    - boolean running
    + static GameEngine getInstance()
    + void start()
    + void play()
  }
}

package "org.example.board" {
  interface IJump {
    + int getFrom()
    + int getTo()
  }
  class Board {
    - static Board instance
    - int size
    - Map<Integer, IJump> jumps
    - List<org.example.player.Player> players
    + static Board getInstance(int size)
    + int getSize()
    + void addJump(IJump)
    + int applyJumpIfAny(int position)
    + void print()
  }
  class Snake implements IJump {
    - int from
    - int to
  }
  class Ladder implements IJump {
    - int from
    - int to
  }
}

package "org.example.dice" {
  class Dice {
    + int roll()
  }
  class DiceSet {
    - List<Dice> dice
    + int roll()
    + static DiceSet getInstance(int count)
  }
}

package "org.example.player" {
  abstract class Player {
    - String id
    - String name
    - int position
    + String getShortId()
    + void move(int steps)
    + boolean isHuman()
  }
  class HumanPlayer extends Player {
    + boolean isHuman()
  }
  class BotPlayer extends Player {
    + boolean isHuman()
  }
}

package "org.example.rules" {
  enum RuleType
  class RuleResult {
    + boolean allowed
    + int newPosition
    + String message
  }
  class RuleContext {
    + org.example.player.Player player
    + int rollSum
    + int currentPosition
    + int boardSize
  }
  interface IRule {
    + RuleType getType()
    + RuleResult apply(RuleContext ctx)
  }
  abstract class BaseRule implements IRule {
    + RuleType type
  }
  class RuleManager {
    - List<IRule> rules
    + void addRule(IRule)
    + RuleResult evaluate(RuleContext)
  }
  class RuleConfigurator {
    + static RuleManager defaultRules()
  }
}

package "org.example.rules.defaults" {
  class StandardStartRule extends org.example.rules.BaseRule
  class ExactLandingRule extends org.example.rules.BaseRule
  class StandardWinningRule extends org.example.rules.BaseRule
  class KillRule extends org.example.rules.BaseRule
  class DoubleSixRule extends org.example.rules.BaseRule
}

' Relationships
Main --> GameEngine : starts
GameEngine --> Board : uses
GameEngine --> DiceSet : uses
GameEngine --> RuleManager : uses
GameEngine --> Player : manages turns
Board o-- IJump : owns
Board --> Player : positions of
Snake ..|> IJump
Ladder ..|> IJump
DiceSet *-- Dice : contains
Player <|-- HumanPlayer
Player <|-- BotPlayer
RuleManager o-- IRule : applies
IRule <|-- BaseRule
BaseRule <|-- StandardStartRule
BaseRule <|-- ExactLandingRule
BaseRule <|-- StandardWinningRule
BaseRule <|-- KillRule
BaseRule <|-- DoubleSixRule
RuleConfigurator --> RuleManager : builds

@enduml