@startuml SnakeAndLadderClassDiagram
skinparam classAttributeIconSize 0
skinparam packageStyle rectangle
skinparam shadowing false
skinparam classFontColor #1f2937
skinparam classBorderColor #374151
skinparam classBackgroundColor #ffffff
skinparam ArrowColor #374151

package "org.example" {
  class Main {
    +main(args: String[]): void
  }
}

package "org.example.engine" {
  class GameEngine {
    -scanner: java.util.Scanner
    +start(): void
    ..game loop..
    -askInt(prompt: String, min: int, max: int): int
    -runGame(board: Board, diceSet: DiceSet, players: java.util.List<Player>): void
    -handlePlayerTurn(current: Player, diceSet: DiceSet): int
    -handleBotTurn(player: BotPlayer, diceSet: DiceSet): int
    -handleHumanTurn(player: HumanPlayer, diceSet: DiceSet): int
    -waitForEnterKey(): void
  }
}

package "org.example.board" {
  class Board {
    -instance: Board
    -n: int
    -size: int
    -lastCell: int
    -jumps: java.util.Map<Integer, IJump>
    -players: java.util.List<org.example.player.Player>
    -rand: java.util.Random
    -Board(n: int, players: java.util.List<Player>)
    +getInstance(n: int, players: java.util.List<Player>): Board
    -generateRandomJumps(): void
    +movePlayer(player: org.example.player.Player, roll: int): int
    +printBoard(): void
    +getLastCell(): int
  }

  interface IJump {
    +from(): int
    +to(): int
    +isSnake(): boolean
  }

  class Snake implements IJump {
    -head: int
    -tail: int
    +from(): int
    +to(): int
    +isSnake(): boolean
  }

  class Ladder implements IJump {
    -start: int
    -end: int
    +from(): int
    +to(): int
    +isSnake(): boolean
  }
}

package "org.example.dice" {
  class Dice {
    -FACES: int = 6 {static}
    -rand: java.util.Random
    +roll(): int
  }

  class DiceSet {
    -instance: DiceSet
    -dice: java.util.List<Dice>
    -DiceSet(count: int)
    +getInstance(count: int): DiceSet
    +roll(): int
  }
}

package "org.example.player" {
  abstract class Player {
    -id: String
    -name: String
    -position: int
    +Player(id: String, name: String)
    +getId(): String
    +getName(): String
    +getPosition(): int
    +setPosition(pos: int): void
    +takeTurn(diceSet: org.example.dice.DiceSet): int
  }

  class HumanPlayer extends Player {
    +HumanPlayer(id: String, name: String)
    +takeTurn(diceSet: org.example.dice.DiceSet): int
  }

  class BotPlayer extends Player {
    +BotPlayer(id: String, name: String)
    +takeTurn(diceSet: org.example.dice.DiceSet): int
  }
}

' Relationships
Main --> GameEngine : uses
GameEngine ..> Board : uses
GameEngine ..> DiceSet : uses
GameEngine ..> Player : creates/uses
GameEngine ..> HumanPlayer
GameEngine ..> BotPlayer

Board o--> "players" Player : holds
Board o--> IJump : has many (jumps)
Board ..> Snake
Board ..> Ladder
Board --> "move" Player : movePlayer()

DiceSet o--> "dice" Dice : contains many
Player ..> DiceSet : takeTurn()

Snake ..|> IJump
Ladder ..|> IJump

HumanPlayer --|> Player
BotPlayer --|> Player

note right of Board
  Singleton via static instance
  getInstance(n, players)
end note

note right of DiceSet
  Singleton via static instance
  getInstance(count)
end note

@enduml